{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","api","axios","create","baseURL","validateUrl","url","RegExp","test","App","useState","data","setData","iserror","setIserror","errorMessages","setErrorMessages","allowedList","useEffect","get","then","res","filter","dt","includes","first_name","catch","error","console","log","duplicateExists","val","find","row","id","last_name","className","Grid","container","spacing","item","xs","class","Alert","severity","map","msg","i","key","title","length","columns","field","hidden","icons","editable","onRowUpdate","newData","oldData","Promise","resolve","errorList","undefined","push","patch","dataUpdate","tableData","handleRowUpdate","onRowAdd","post","dataToAdd","handleRowAdd","onRowDelete","delete","dataDelete","index","splice","handleRowDelete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b9d663f5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { forwardRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert';\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst api = axios.create({\n  baseURL: `https://reqres.in/api`\n})\n\n\nfunction validateUrl(url){\n    var patt = new RegExp(/(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-]))?/);\n    return patt.test(url);\n}\n\nfunction App() {\n\n  var columns = [\n    {title: \"Name\", field: \"first_name\"},\n    {title: \"Value\", field: \"last_name\"},\n    {title: \"id\", field: \"id\", hidden: true}\n  ]\n  const [data, setData] = useState([]); \n  const [iserror, setIserror] = useState(false)\n  const [errorMessages, setErrorMessages] = useState([])\n  const allowedList = ['dih.console.username','dih.console.password','dih.console.url','dih.console.accessmode'];\n  useEffect(() => { \n    api.get(\"/users\")\n        .then(res => {  \n            res.data.data.filter(dt => allowedList.includes(dt.first_name));\n            setData();\n         })\n         .catch(error=>{\n             console.log(\"Error\")\n         })\n  }, []);\n  \n  const duplicateExists = (val) => {\n      return data.find(row => row?.id === val?.id && row?.first_name === val?.first_name && row?.last_name === val?.last_name);\n  }\n\n  const getDataSize = () => {\n      const len = data ? data.length : 0 ;                   \n      return \"System Properties(\"+len+\")\";\n  }\n  \n  const handleRowUpdate = (newData, oldData, resolve) => {\n    let errorList = []\n    if(newData.first_name !== undefined && !allowedList.includes(newData.first_name)){\n      errorList.push(\"Property name not allowed\")\n    } else {\n        if(data && duplicateExists(newData)){\n            errorList.push(\"Property already exist\")    \n        }\n        else if(newData.first_name === undefined){\n          errorList.push(\"Empty Name\")\n        }\n        else if(newData.last_name === undefined){\n          errorList.push(\"Empty Value\")\n        }\n        else if(newData.first_name === 'dih.console.url' && !validateUrl(newData.last_name)){\n          errorList.push(\"Invalid value for '\"+newData.first_name+\"'\")    \n        }\n    }\n    if(errorList.length < 1){\n      api.patch(\"/users/\"+newData.id, newData)\n      .then(res => {\n        const dataUpdate = !data ? [] : [...data];\n        const index = oldData.tableData.id;\n        dataUpdate[index] = newData;\n        setData([...dataUpdate]);\n        resolve()\n        setIserror(false)\n        setErrorMessages([])\n      })\n      .catch(error => {\n        setErrorMessages([\"Update failed! Server error\"])\n        setIserror(true)\n        resolve()\n        \n      })\n    }else{\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n\n    }\n    \n  }\n\n  const handleRowAdd = (newData, resolve) => {\n    //validation\n    let errorList = [];\n    if(newData.first_name !== undefined && !allowedList.includes(newData.first_name)){\n      errorList.push(\"Property name not allowed\")\n    } else {\n        if(data && duplicateExists(newData)){\n            errorList.push(\"Property already exist\")    \n        }\n        else if(newData.first_name === undefined){\n          errorList.push(\"Empty Name\")\n        }\n        else if(newData.last_name === undefined){\n          errorList.push(\"Empty Value\")\n        }\n        else if(newData.first_name === 'dih.console.url' && !validateUrl(newData.last_name)){\n          errorList.push(\"Invalid value for '\"+newData.first_name+\"'\")    \n        }\n    }\n    if(errorList.length < 1){ //no error\n      api.post(\"/users\", newData)\n      .then(res => {\n        let dataToAdd = !data ? [] : [...data];\n        dataToAdd.push(newData);\n        setData(dataToAdd);\n        resolve()\n        setErrorMessages([])\n        setIserror(false)\n      })\n      .catch(error => {\n        setErrorMessages([\"Cannot add data. Server error!\"])\n        setIserror(true)\n        resolve()\n      })\n    }else{\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n\n    \n  }\n\n  const handleRowDelete = (oldData, resolve) => {\n    api.delete(\"/users/\"+oldData.id)\n      .then(res => {\n        const dataDelete = [...data];\n        const index = oldData.tableData.id;\n        dataDelete.splice(index, 1);\n        setData([...dataDelete]);\n        resolve()\n      })\n      .catch(error => {\n        setErrorMessages([\"Delete failed! Server error\"])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n\n  return (\n    <div className=\"App\">\n      \n      <Grid container spacing={0}>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={10}>\n          {iserror &&\n           <div class=\"errorText\"> \n              <Alert severity=\"error\">\n                  {errorMessages.map((msg, i) => {\n                      return <div key={i}>{msg}</div>\n                  })}\n              </Alert>\n            </div>\n           }\n            <MaterialTable\n              title={getDataSize()}\n              columns={columns}\n              data={data}\n              icons={tableIcons}\n              editable={{\n                onRowUpdate: (newData, oldData) =>\n                  new Promise((resolve) => {\n                      handleRowUpdate(newData, oldData, resolve);\n                      \n                  }),\n                onRowAdd: (newData) =>\n                  new Promise((resolve) => {\n                    handleRowAdd(newData, resolve)\n                  }),\n                onRowDelete: (oldData) =>\n                  new Promise((resolve) => {\n                    handleRowDelete(oldData, resolve)\n                  }),\n              }}\n            />\n          </Grid>\n          <Grid item xs={1}></Grid>\n        </Grid>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}